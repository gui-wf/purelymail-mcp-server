/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v0/createUser": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Creates a user
         * @description Creates a new user.
         */
        post: operations["Create User"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/deleteUser": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Deletes a user
         * @description Deletes a user.
         */
        post: operations["Delete User"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/listUser": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Lists all users under your account.
         * @description Lists all users under your account (up to 1000).
         */
        post: operations["List Users"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/modifyUser": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Modifies a user
         * @description Modifies a user.
         */
        post: operations["Modify User"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/getUser": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Gets a user
         * @description Retrieves details of a user.
         */
        post: operations["Get User"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/upsertPasswordReset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Creates or updates a password reset method (either phone or email).
         * @description Creates or updates a password reset method (either phone or email).
         */
        post: operations["Create or update Password Reset Method"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/deletePasswordReset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Deletes a password reset method.
         * @description Deletes a password reset method.
         */
        post: operations["Delete Password Reset Method"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/listPasswordReset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Lists all password reset methods for a user.
         * @description Lists all password reset methods for a user.
         */
        post: operations["List Password Reset Methods"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/createRoutingRule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Creates a new routing rule for a domain
         * @description Routing rule must not have the same user/prefix as any other existing rules for the domain.
         */
        post: operations["Create Routing Rule"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/deleteRoutingRule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Deletes an existing routing rule */
        post: operations["Delete Routing Rule"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/listRoutingRules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Lists all routing rules active under your account */
        post: operations["List Routing Rules"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/addDomain": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Adds a domain.
         * @description Adds a domain, assuming it passes DNS checks.
         */
        post: operations["Add Domain"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/getOwnershipCode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Gets ownership code record
         * @description Gets the DNS record value of the Purelymail ownership proof record, required to add a domain
         */
        post: operations["Get Ownership Code"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/listDomains": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Lists domains accessible to an account.
         * @description Lists domains accessible to an account, possibly including shared domains.
         */
        post: operations["List Domains"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/updateDomainSettings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Updates settings for a domain
         * @description Updates settings for an existing owned domain.
         */
        post: operations["Update Domain Settings"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/deleteDomain": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete Domain
         * @description Deletes a domain, and all dependent settings and users.
         */
        post: operations["Delete Domain"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/createAppPassword": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Creates an app password
         * @description Creates a new app password.
         */
        post: operations["Create App Password"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/deleteAppPassword": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Deletes app password
         * @description Deletes an app password.
         */
        post: operations["Delete App Password"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/checkAccountCredit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Returns current account credit.
         * @description Returns current account credit, as a BigDecimal string with precision 64.
         */
        post: operations["Check Account Credit"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Error: {
            code: string;
            message: string;
        };
        CreateUserRequest: {
            /** @description Local part of username, e.g. "user" in "user@domain.com" */
            userName: string;
            domainName: string;
            password: string;
            /** @default true */
            enablePasswordReset: boolean;
            recoveryEmail?: string;
            recoveryEmailDescription?: string;
            recoveryPhone?: string;
            recoveryPhoneDescription?: string;
            /** @default true */
            enableSearchIndexing: boolean;
            /** @default true */
            sendWelcomeEmail: boolean;
        };
        EmptyResponse: Record<string, never>;
        DeleteUserRequest: {
            /** @description Full username, e.g. "user@domain.com" */
            userName: string;
        };
        EmptyRequest: Record<string, never>;
        ListUserResponse: {
            users: string[];
        };
        ModifyUserRequest: {
            /** @description Full username, e.g. "user@domain.com" */
            userName: string;
            /** @description Full new username, e.g. "user@domain.com" */
            newUserName?: string;
            /** @description New password for user */
            newPassword?: string;
            /** @description Whether search indexing should be enabled for this user. Indexes may take some time after enabling to be created. */
            enableSearchIndexing?: boolean;
            /** @description Whether this user can have their password reset. */
            enablePasswordReset?: boolean;
            /** @description Whether this user requires 2FA for login. */
            requireTwoFactorAuthentication?: boolean;
        };
        GetUserRequest: {
            /** @description Full username, e.g. "user@domain.com" */
            userName: string;
        };
        UserPasswordResetMethodType: Record<string, never>;
        GetUserPasswordResetMethod: {
            type: components["schemas"]["UserPasswordResetMethodType"];
            target: string;
            description: string;
            allowMfaReset: boolean;
        };
        GetUserResponse: {
            enableSearchIndexing: boolean;
            recoveryEnabled: boolean;
            requireTwoFactorAuthentication: boolean;
            enableSpamFiltering: boolean;
            resetMethods: components["schemas"]["GetUserPasswordResetMethod"][];
        };
        UpsertPasswordResetRequest: {
            /** @description Username */
            userName: string;
            /** @description Target from list operation. If provided, update existing method matching target instead of creating a new one. */
            existingTarget?: string;
            /** @description Type of password reset, either 'email' or 'phone' */
            type: string;
            /** @description Email address or phone number */
            target: string;
            /**
             * @description Human-readable description
             * @default
             */
            description: string;
            /**
             * @description Whether this method should allow a user's MFA to be reset as well (defaults to true)
             * @default true
             */
            allowMfaReset: boolean;
        };
        DeletePasswordResetRequest: {
            /** @description Username */
            userName: string;
            /** @description Target of password reset method */
            target?: string;
        };
        ListPasswordResetRequest: {
            userName: string;
        };
        ListPasswordResetResponseItem: {
            /** @description Type of password reset, either 'email' or 'phone' */
            type: string;
            /** @description Email address or phone number */
            target: string;
            /** @description Human-readable description */
            description: string;
            /** @description Whether this method should allow a user's MFA to be reset as well (defaults to true) */
            allowMfaReset: boolean;
        };
        ListPasswordResetResponse: {
            users: components["schemas"]["ListPasswordResetResponseItem"][];
        };
        CreateRoutingRequest: {
            domainName: string;
            prefix: boolean;
            /** @description The local part of the user address to be matched, i.e. "user" in "user@domain.org" */
            matchUser: string;
            /** @description List of full email addresses that this mail will be rerouted to */
            targetAddresses: string[];
            /**
             * @description Whether this is a 'catchall' rule that will not fire if address maps to a user
             * @default false
             */
            catchall: boolean;
        };
        DeleteRoutingRequest: {
            /**
             * Format: int64
             * @description This should be returned from a ListRoutingRequest
             */
            routingRuleId: number;
        };
        RoutingRule: {
            /** Format: int64 */
            id: number;
            domainName: string;
            prefix: boolean;
            matchUser: string;
            targetAddresses: string[];
            catchall: boolean;
        };
        ListRoutingResponse: {
            rules: components["schemas"]["RoutingRule"][];
        };
        AddDomainRequest: {
            domainName: string;
        };
        GetOwnershipCodeResponse: {
            code: string;
        };
        ListDomainsRequest: {
            /**
             * @description Whether to include basic Purelymail shared domains in the response
             * @default false
             */
            includeShared: boolean;
        };
        ApiDomainDnsSummary: {
            passesMx: boolean;
            passesSpf: boolean;
            passesDkim: boolean;
            passesDmarc: boolean;
        };
        ApiDomainInfo: {
            name: string;
            /** @description Whether this domain can be used to reset an account's password */
            allowAccountReset: boolean;
            /** @description Whether the symbolic subaddressing is enabled on this domain */
            symbolicSubaddressing: boolean;
            /** @description Whether this domain is shared (owned by Purelymail) */
            isShared: boolean;
            /** @description Summary of current known DNS records */
            dnsSummary: components["schemas"]["ApiDomainDnsSummary"];
        };
        ListDomainsResponse: {
            domains: components["schemas"]["ApiDomainInfo"][];
        };
        UpdateDomainSettingsRequest: {
            name: string;
            allowAccountReset?: boolean;
            symbolicSubaddressing?: boolean;
            /** @default false */
            recheckDns: boolean;
        };
        DeleteDomainRequest: {
            name: string;
        };
        CreateAppPassword: {
            /** @description Full "user@domain.com" */
            userHandle: string;
            /**
             * @description Optional user-friendly description
             * @default
             */
            name: string;
        };
        CreateAppPasswordResponse: {
            appPassword: string;
        };
        DeleteAppPasswordRequest: {
            /** @description Full username, e.g. "user@domain.com" */
            userName: string;
            /** @description Full app password */
            appPassword: string;
        };
        CheckCreditResponse: {
            credit: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: {
        CreateUserRequest: {
            content: {
                "application/json": components["schemas"]["CreateUserRequest"];
            };
        };
        DeleteUserRequest: {
            content: {
                "application/json": components["schemas"]["DeleteUserRequest"];
            };
        };
        EmptyRequest: {
            content: {
                "application/json": components["schemas"]["EmptyRequest"];
            };
        };
        ModifyUserRequest: {
            content: {
                "application/json": components["schemas"]["ModifyUserRequest"];
            };
        };
        GetUserRequest: {
            content: {
                "application/json": components["schemas"]["GetUserRequest"];
            };
        };
        UpsertPasswordResetRequest: {
            content: {
                "application/json": components["schemas"]["UpsertPasswordResetRequest"];
            };
        };
        DeletePasswordResetRequest: {
            content: {
                "application/json": components["schemas"]["DeletePasswordResetRequest"];
            };
        };
        ListPasswordResetRequest: {
            content: {
                "application/json": components["schemas"]["ListPasswordResetRequest"];
            };
        };
        CreateRoutingRequest: {
            content: {
                "application/json": components["schemas"]["CreateRoutingRequest"];
            };
        };
        DeleteRoutingRequest: {
            content: {
                "application/json": components["schemas"]["DeleteRoutingRequest"];
            };
        };
        AddDomainRequest: {
            content: {
                "application/json": components["schemas"]["AddDomainRequest"];
            };
        };
        ListDomainsRequest: {
            content: {
                "application/json": components["schemas"]["ListDomainsRequest"];
            };
        };
        UpdateDomainSettingsRequest: {
            content: {
                "application/json": components["schemas"]["UpdateDomainSettingsRequest"];
            };
        };
        DeleteDomainRequest: {
            content: {
                "application/json": components["schemas"]["DeleteDomainRequest"];
            };
        };
        CreateAppPassword: {
            content: {
                "application/json": components["schemas"]["CreateAppPassword"];
            };
        };
        DeleteAppPasswordRequest: {
            content: {
                "application/json": components["schemas"]["DeleteAppPasswordRequest"];
            };
        };
    };
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "Create User": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: components["requestBodies"]["CreateUserRequest"];
        responses: {
            /** @description Result of operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        result: components["schemas"]["EmptyResponse"];
                    };
                };
            };
        };
    };
    "Delete User": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: components["requestBodies"]["DeleteUserRequest"];
        responses: {
            /** @description Result of operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        result: components["schemas"]["EmptyResponse"];
                    };
                };
            };
        };
    };
    "List Users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: components["requestBodies"]["EmptyRequest"];
        responses: {
            /** @description Result of operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        result: components["schemas"]["ListUserResponse"];
                    };
                };
            };
        };
    };
    "Modify User": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: components["requestBodies"]["ModifyUserRequest"];
        responses: {
            /** @description Result of operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        result: components["schemas"]["EmptyResponse"];
                    };
                };
            };
        };
    };
    "Get User": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: components["requestBodies"]["GetUserRequest"];
        responses: {
            /** @description Result of operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        result: components["schemas"]["GetUserResponse"];
                    };
                };
            };
        };
    };
    "Create or update Password Reset Method": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: components["requestBodies"]["UpsertPasswordResetRequest"];
        responses: {
            /** @description Result of operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        result: components["schemas"]["EmptyResponse"];
                    };
                };
            };
        };
    };
    "Delete Password Reset Method": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: components["requestBodies"]["DeletePasswordResetRequest"];
        responses: {
            /** @description Result of operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        result: components["schemas"]["EmptyResponse"];
                    };
                };
            };
        };
    };
    "List Password Reset Methods": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: components["requestBodies"]["ListPasswordResetRequest"];
        responses: {
            /** @description Result of operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        result: components["schemas"]["ListPasswordResetResponse"];
                    };
                };
            };
        };
    };
    "Create Routing Rule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: components["requestBodies"]["CreateRoutingRequest"];
        responses: {
            /** @description Result of operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        result: components["schemas"]["EmptyResponse"];
                    };
                };
            };
        };
    };
    "Delete Routing Rule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: components["requestBodies"]["DeleteRoutingRequest"];
        responses: {
            /** @description Result of operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        result: components["schemas"]["EmptyResponse"];
                    };
                };
            };
        };
    };
    "List Routing Rules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: components["requestBodies"]["EmptyRequest"];
        responses: {
            /** @description Result of operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        result: components["schemas"]["ListRoutingResponse"];
                    };
                };
            };
        };
    };
    "Add Domain": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: components["requestBodies"]["AddDomainRequest"];
        responses: {
            /** @description Result of operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        result: components["schemas"]["EmptyResponse"];
                    };
                };
            };
        };
    };
    "Get Ownership Code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: components["requestBodies"]["EmptyRequest"];
        responses: {
            /** @description Result of operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        result: components["schemas"]["GetOwnershipCodeResponse"];
                    };
                };
            };
        };
    };
    "List Domains": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: components["requestBodies"]["ListDomainsRequest"];
        responses: {
            /** @description Result of operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        result: components["schemas"]["ListDomainsResponse"];
                    };
                };
            };
        };
    };
    "Update Domain Settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: components["requestBodies"]["UpdateDomainSettingsRequest"];
        responses: {
            /** @description Result of operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        result: components["schemas"]["EmptyResponse"];
                    };
                };
            };
        };
    };
    "Delete Domain": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: components["requestBodies"]["DeleteDomainRequest"];
        responses: {
            /** @description Result of operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        result: components["schemas"]["EmptyResponse"];
                    };
                };
            };
        };
    };
    "Create App Password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: components["requestBodies"]["CreateAppPassword"];
        responses: {
            /** @description Result of operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        result: components["schemas"]["CreateAppPasswordResponse"];
                    };
                };
            };
        };
    };
    "Delete App Password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: components["requestBodies"]["DeleteAppPasswordRequest"];
        responses: {
            /** @description Result of operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        result: components["schemas"]["EmptyResponse"];
                    };
                };
            };
        };
    };
    "Check Account Credit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: components["requestBodies"]["EmptyRequest"];
        responses: {
            /** @description Result of operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        result: components["schemas"]["CheckCreditResponse"];
                    };
                };
            };
        };
    };
}
